
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Deny all client-side reads and writes by default.
    // All data access should go through trusted server-side code (Admin SDK).
    match /{document=**} {
      allow read, write: if false;
    }
    
    // --- START: Feature Flag Rules (Optional Client-side Hardening) ---
    // These rules are a secondary layer of defense. The primary security is enforced
    // by the middleware and server-side checks. These rules would be used if you ever
    // needed to allow a trusted client (like the Ops Console itself) to read flags directly.
    
    // To enable, you would need to set custom claims on your Firebase Auth users.
    // `request.auth.token.roles` would be an array like ['admin', 'staff'].
    
    match /flags/{flagKey} {
      // Allow read access for users with 'staff' or 'admin' roles.
      allow read: if request.auth.token.roles.hasAny(['staff', 'admin']);
      
      // Allow write access ONLY for users with the 'admin' role.
      allow write: if request.auth.token.roles.hasAny(['admin']);
    }
    
    match /flag_audits/{auditId} {
      // The audit log should be append-only and never be written to by clients.
      // Read access could be granted to admins for display in a client-side log viewer.
      allow read: if request.auth.token.roles.hasAny(['admin']);
      allow write: if false;
    }
    // --- END: Feature Flag Rules ---
    
    // Deny access to sensitive collections
    match /eligibility/{person_hash} {
      allow read, write: if false;
    }

    match /devices/{deviceId} {
      allow read, write: if false;
    }

    match /links/{linkId} {
        allow read, write: if false;
    }
  }
}
